{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"max\":12,\"current\":10},\"skills\":{\"hacking\":249,\"strength\":27,\"defense\":25,\"dexterity\":20,\"agility\":30,\"charisma\":62,\"intelligence\":0},\"exp\":{\"hacking\":596747.679655712,\"strength\":588.7239181964496,\"defense\":542.3296511247999,\"dexterity\":392.7633710886387,\"agility\":696.9772080308188,\"charisma\":2464.892061509615,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.1046254064714076,\"hacking_speed\":1.1046254064714076,\"hacking_money\":1.1046254064714076,\"hacking_grow\":1.1046254064714076,\"hacking\":1.1046254064714076,\"strength\":1.1046254064714076,\"defense\":1.1046254064714076,\"dexterity\":1.1046254064714076,\"agility\":1.1046254064714076,\"charisma\":1.1046254064714076,\"hacking_exp\":1.1046254064714076,\"strength_exp\":1.1046254064714076,\"defense_exp\":1.1046254064714076,\"dexterity_exp\":1.1046254064714076,\"agility_exp\":1.1046254064714076,\"charisma_exp\":1.1046254064714076,\"company_rep\":1.1046254064714076,\"faction_rep\":1.1046254064714076,\"crime_money\":1.1046254064714076,\"crime_success\":1.1046254064714076,\"hacknet_node_money\":1.1046254064714076,\"hacknet_node_purchase_cost\":0.9052842657262246,\"hacknet_node_ram_cost\":0.9052842657262246,\"hacknet_node_core_cost\":0.9052842657262246,\"hacknet_node_level_cost\":0.9052842657262246,\"work_money\":1.1046254064714076,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":10,\"name\":\"NeuroFlux Governor\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"CyberSec\"],\"factionInvitations\":[\"Netburners\",\"Sector-12\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":81,\"moneyGainRatePerSecond\":454.87172206479755,\"onlineTimeSeconds\":70388.200000005,\"ram\":32,\"totalMoneyGenerated\":22848691.943140972,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":81,\"moneyGainRatePerSecond\":454.87172206479755,\"onlineTimeSeconds\":67670.99999999513,\"ram\":32,\"totalMoneyGenerated\":22809849.565636642,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":81,\"moneyGainRatePerSecond\":262.32721118665444,\"onlineTimeSeconds\":55348.59999995031,\"ram\":16,\"totalMoneyGenerated\":14043680.04749645,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":81,\"moneyGainRatePerSecond\":262.32721118665444,\"onlineTimeSeconds\":52028.39999993823,\"ram\":16,\"totalMoneyGenerated\":13629203.954697408,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":81,\"moneyGainRatePerSecond\":262.32721118665444,\"onlineTimeSeconds\":51805.79999993742,\"ram\":16,\"totalMoneyGenerated\":12882329.621292433,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":81,\"moneyGainRatePerSecond\":454.87172206479755,\"onlineTimeSeconds\":40670.79999992904,\"ram\":32,\"totalMoneyGenerated\":18479223.252952658,\"name\":\"hacknet-node-5\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{\"FoodNStuff\":\"Employee\",\"Joe's Guns\":\"Part-time Employee\",\"Alpha Enterprises\":\"Software Engineering Intern\"},\"karma\":-0.2,\"numPeopleKilled\":0,\"location\":\"Travel Agency\",\"money\":120856993.22800669,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-488568,\"codingcontract\":0,\"corporation\":0,\"crime\":33138.762194142226,\"gang\":0,\"hacking\":31634640,\"hacknet\":104692978.38563669,\"hacknet_expenses\":-12195708.439023057,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":120855963.22800672,\"work\":2130017.0266996906,\"servers\":-4750534.50752,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-488568,\"codingcontract\":0,\"corporation\":0,\"crime\":33138.762194142226,\"gang\":0,\"hacking\":31634640,\"hacknet\":104692978.38563669,\"hacknet_expenses\":-12195708.439023057,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":120855963.22800672,\"work\":2130017.0266996906,\"servers\":-4750534.50752,\"other\":-200000,\"augmentations\":0}},\"playtimeSinceLastAug\":71362200,\"playtimeSinceLastBitnode\":32269036000,\"purchasedServers\":[\"squeezy\",\"moose\"],\"scriptProdSinceLastAug\":31634640,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":[],\"exploits\":[],\"achievements\":[{\"ID\":\"INSTALL_1\",\"unlockedOn\":1672602686406},{\"ID\":\"NS2\",\"unlockedOn\":1672604246397},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1672614746395},{\"ID\":\"WORKOUT\",\"unlockedOn\":1672618826394},{\"ID\":\"TOR\",\"unlockedOn\":1672620386394},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1672629026394},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1672630166398},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1672632026394},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1672638686396}],\"terminalCommandHistory\":[\"s-c\",\"s-a\",\"scane\",\"analyze\",\"close\",\"squeezy\",\"analyze\",\"ls\",\"home\",\"ls\",\"cd programs/\",\"ls\",\"run infiltrationMonitor.js\",\"run infiltrationMonitor.js -tail\",\"run infiltrationMonitor.js tail\",\"run infiltrationMonitor.js\",\"mem infiltrationMonitor.js\",\"cd ..\",\"ls\",\"run infiltrationMonitor.js\",\"run /programs/infiltrationMonitor.js\",\"cd reports\",\"ls\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"run /programs/infiltrationMonitor.js\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"run /programs/infiltrationMonitor.js\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"ls\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"run /programs/infiltrationMonitor.js\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"run /programs/infiltrationMonitor.js\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"run /programs/infiltrationMonitor.js\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"run /programs/infiltrationMonitor.js\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"run /programs/infiltrationMonitor.js\",\"nano Infiltration_Report--Sun-Jan-01-2023.txt\",\"cd ..\",\"ls\",\"cd programs/\",\"ls\",\"cd ..\",\"run /programs/infiltrationMonitor.js\",\"cd ..\",\"cd reports/\",\"ls\",\"nano Infiltration_Report--Mon-Jan-02-2023.txt\"],\"lastUpdate\":1672685099785,\"lastSave\":1672685098262,\"totalPlaytime\":32269036000,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":200134,\"factionWorkType\":\"HACKING\",\"factionName\":\"CyberSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"1ef59cb764669a\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"38.1.1.1\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"ServerProfiler.exe\",\"DeepscanV1.exe\"],\"ramUsed\":7.800000000000001,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[26681160,4023,177,111]},\"filename\":\"/programs/hack-farmer.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15714.732420084387,\"onlineMoneyMade\":26681160,\"onlineRunningTime\":53150.00999994232,\"pid\":29,\"ramUsage\":2.6,\"server\":\"home\",\"threads\":3,\"dependencies\":[{\"filename\":\"/programs/hack-farmer.js\",\"url\":\"blob:file:///7d73f999-8726-49e3-bd27-2572d874e170\",\"moduleSequenceNumber\":2067}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n// Defines the \\\"target server\\\", which is the server\\n// that we're going to hack. In this case, it's \\\"n00dles\\\"\\nvar target = \\\"n00dles\\\";\\n\\n// Defines how much money a server should have before we hack it\\n// In this case, it is set to 75% of the server's max money\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\n\\n// Defines the maximum security level the target server can\\n// have. If the target's security level is higher than this,\\n// we'll weaken it before doing anything else\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\n\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\n// on the target server\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n    brutessh(target);\\n}\\n\\n// Get root access to target server\\nnuke(target);\\n\\n// Infinite loop that continously hacks/grows/weakens the target server\\nwhile(true) {\\n    if (getServerSecurityLevel(target) > securityThresh) {\\n        // If the server's security level is above our threshold, weaken it\\n        weaken(target);\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\n        // If the server's money is less than our threshold, grow it\\n        grow(target);\\n    } else {\\n        // Otherwise, hack it\\n        hack(target);\\n    }\\n}\",\"filename\":\"example-hacking-template.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":324,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n\\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n\\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"/scripts/example-template-script.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/example-template-script.js\",\"url\":\"blob:file:///708a76fc-f271-479d-af7c-824c68d3cad0\",\"moduleSequenceNumber\":563}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":691,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.hack('n00dles');\\n\\t}\\n}\",\"filename\":\"n00dles.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"n00dles.js\",\"url\":\"blob:file:///8c6d8f70-6b46-4e8c-838a-ddfa508526ef\",\"moduleSequenceNumber\":361}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Custom color coding.\\r\\n    const cyan = \\\"\\\\u001b[36m\\\";\\r\\n    const green = \\\"\\\\u001b[32m\\\";\\r\\n    const red = \\\"\\\\u001b[31m\\\";\\r\\n    const reset = \\\"\\\\u001b[0m\\\";\\r\\n\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n    \\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n    \\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    \\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    \\r\\n    ns.print(`Current security threshold: ${securityThresh}\\\\nCurrent cash threshold: ${moneyThresh}`)\\r\\n\\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    \\r\\n    if (ns.fileExists(\\\"ServerProfiler.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n\\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n    \\r\\n    \\r\\n    var hackCount = 0\\r\\n    var hackLimit = 10 // Set hack limit to then sleep and restart to gain more XP\\r\\n    \\r\\n    var sleepTime = 5000 // ms 5s\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while(true) {\\r\\n\\r\\n        ns.print(`${cyan}Hacking chance: ${hackAnalyzeChance(target)}${reset}`)\\r\\n\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            ns.print('INFO ℹ running weaken...⏳')\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            ns.print('INFO ℹ running grow...⏳')\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            if (hackCount !== hackLimit) {\\r\\n                ns.print(`SUCCESS Hacking target: \\\\u001b[36m${target} - current iteration ${hackCount}/${hackLimit}\\\\u001b[0m`)\\r\\n                await ns.hack(target);\\r\\n                hackCount += 1\\r\\n           } else {\\r\\n            ns.print(`INFO Sleeping target: ${target} - current iteration ${hackCount}/${hackLimit}\\\\n letting build up of next batch`)\\r\\n                hackCount = 0\\r\\n               await ns.sleep(sleepTime)\\r\\n           }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    }\",\"filename\":\"/programs/hack-farmer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/programs/hack-farmer.js\",\"url\":\"blob:file:///89138313-9fa2-42c9-a96a-12f87e071f19\",\"moduleSequenceNumber\":2326}],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":4331,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hackAnalyzeChance\",\"cost\":1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n    \\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n    \\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    \\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    \\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    \\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n    \\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n           await ns.hack(target);\\r\\n\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    }\",\"filename\":\"/programs/hacknetter.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":3872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n  /**\\r\\n   * Author: Haven Bitly\\r\\n   * Infiltration monitor\\r\\n   *\\r\\n   * Description: Will check all locations and list out the ones that have the\\r\\n   * highest chance of being vulnerable.\\r\\n   */\\r\\n\\r\\n  //Open logs from foo.script on the current server that was run with no args\\r\\n  var DEBUG_MODE = false;\\r\\n  const green = \\\"\\\\u001b[32m\\\";\\r\\n  const reset = \\\"\\\\u001b[0m\\\";\\r\\n  DEBUG_MODE && ns.tail(\\\"/programs/infiltrationMonitor.js\\\");\\r\\n\\r\\n  ns.print(`INFO: Getting locations list...⏳`);\\r\\n\\r\\n  var locationsList = ns.infiltration.getPossibleLocations();\\r\\n\\r\\n  ns.printf(`SUCCESS: Locations list retrieved...✅ %j`, locationsList);\\r\\n\\r\\n  let difficultyList = [];\\r\\n\\r\\n  if (locationsList.length !== 0) {\\r\\n    ns.print(`SUCCESS Locations gathered...${locationsList.length}`);\\r\\n\\r\\n    locationsList.forEach((location, i) => {\\r\\n      ns.print(`INFO Getting location difficulty...⏳ - ${location.name}`);\\r\\n      let locationDifficultyLevel = ns.infiltration.getInfiltration(\\r\\n        location.name\\r\\n      );\\r\\n\\r\\n      //   let example = {\\r\\n      //     location: {\\r\\n      //       city: \\\"Volhaven\\\",\\r\\n      //       costMult: 0,\\r\\n      //       expMult: 0,\\r\\n      //       name: \\\"SysCore Securities\\\",\\r\\n      //       types: [0],\\r\\n      //       techVendorMaxRam: 0,\\r\\n      //       techVendorMinRam: 0,\\r\\n      //       infiltrationData: {\\r\\n      //         maxClearanceLevel: 18,\\r\\n      //         startingSecurityLevel: 4.77,\\r\\n      //       },\\r\\n      //     },\\r\\n      //     reward: {\\r\\n      //       tradeRep: 19349.35680836175,\\r\\n      //       sellCash: 112164030.72074203,\\r\\n      //       SoARep: 1401.2925969447706,\\r\\n      //     },\\r\\n      //     difficulty: 3,\\r\\n      //   };\\r\\n\\r\\n      ns.printf(\\r\\n        `SUCCESS Location difficulty gathered...⏳ - %j`,\\r\\n        locationDifficultyLevel\\r\\n      );\\r\\n\\r\\n      let formattedStringListing = \\r\\n      `======================== ${i + 1}/${locationsList.length} =========================\\r\\n       Company: ${locationDifficultyLevel.location.name}\\r\\n       City: ${locationDifficultyLevel.location.city}\\r\\n       -------------------------------------------------\\r\\n       Cost-Multipler: ${locationDifficultyLevel.location.costMult}\\r\\n       Expense-Multipler: ${locationDifficultyLevel.location.expMult}\\r\\n       -------------------------------------------------\\r\\n       TYPES: ${locationDifficultyLevel.location.types.toString()}\\r\\n       -------------------------------------------------\\r\\n       REQUIREMENTS\\r\\n       * Clearance Level: ${\\r\\n         locationDifficultyLevel.location.infiltrationData.maxClearanceLevel\\r\\n       }\\r\\n       * Starting Security Level: ${\\r\\n         locationDifficultyLevel.location.infiltrationData.startingSecurityLevel\\r\\n       }\\r\\n       -------------------------------------------------\\r\\n       DIFFICULTY: ${locationDifficultyLevel.difficulty}\\r\\n       RAM (Bytes)\\r\\n       * MAX: ${locationDifficultyLevel.location.techVendorMaxRam}\\r\\n       * MIN: ${locationDifficultyLevel.location.techVendorMinRam}\\r\\n       -------------------------------------------------\\r\\n       Reward\\r\\n       * Trade Reputation: ${locationDifficultyLevel.reward.tradeRep}\\r\\n       * Sell Cashing: ${locationDifficultyLevel.reward.sellCash}\\r\\n       * SoA Reputation: ${locationDifficultyLevel.reward.SoARep}\\r\\n       -------------------------------------------------\\\\n\\r\\n      `;\\r\\n\\r\\n      ns.printf(\\r\\n        `SUCCESS Location difficulty formatted... - %s`,\\r\\n        formattedStringListing\\r\\n      );\\r\\n\\r\\n      difficultyList.push(formattedStringListing);\\r\\n    });\\r\\n\\r\\n  } else {\\r\\n    ns.print(\\\"WARNING: No current locations found\\\");\\r\\n  }\\r\\n\\r\\n  // Write data found into a report folder file.\\r\\n\\r\\n  let filename = `Infiltration_Report--${new Date()\\r\\n    .toDateString()\\r\\n    .split(\\\" \\\")\\r\\n    .join(\\\"-\\\")}`;\\r\\n\\r\\n  ns.write(`${filename}.txt`, difficultyList.join(\\\"\\\"), \\\"w\\\");\\r\\n\\r\\n  // Check if file was created successfully\\r\\n  let createdReport = ns.fileExists(`${filename}.txt`, \\\"home\\\");\\r\\n\\r\\n  if (createdReport) {\\r\\n    // Move report to \\\"reports\\\" folder\\r\\n    ns.print(\\r\\n      `SUCCESS: Report generated! ${filename} - moving to reports folder...`\\r\\n    );\\r\\n    ns.mv(\\\"home\\\", `${filename}.txt`, `/reports/${filename}.txt`);\\r\\n    ns.tprint(\\r\\n      `${green}Report generated successfully! ${filename} - You can view it in the \\\"reports\\\" folder.${reset}`\\r\\n    );\\r\\n  } else {\\r\\n    ns.print(\\r\\n      `ERROR: Report not generated! ${filename} - moving to reports folder failed.`\\r\\n    );\\r\\n  }\\r\\n\\r\\n  ns.print(`SUCCESS report generated successfully! ${filename}`);\\r\\n}\\r\\n\",\"filename\":\"/programs/infiltrationMonitor.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/programs/infiltrationMonitor.js\",\"url\":\"blob:file:///2489fb69-5c4a-4827-bd1e-d9ac31c485b6\",\"moduleSequenceNumber\":4520}],\"dependents\":[],\"ramUsage\":21.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":4520,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"infiltration.getPossibleLocations\",\"cost\":5},{\"type\":\"fn\",\"name\":\"infiltration.getInfiltration\",\"cost\":15},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"/reports/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":3554,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"squeezy\",\"darkweb\",\"moose\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"V2_0_0_API_BREAK.txt\",\"text\":\"This file contains the list of potential API break. A pattern was used to look through all your files and note the spots where you might have a problem. Not everything here is broken.\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/reports/Infiltration_Report--Sun-Jan-01-2023.txt\",\"text\":\"=================================================\\n       Company: AeroCorp\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 8.18\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 23212.875441934077\\n       * Sell Cashing: 355253920.8514189\\n       * SoA Reputation: 2403.0552291421855\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Bachman & Associates\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 15\\n       * Starting Security Level: 8.19\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 29939.172537442784\\n       * Sell Cashing: 459203097.04584056\\n       * SoA Reputation: 2405.99294947121\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Clarke Incorporated\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 18\\n       * Starting Security Level: 9.55\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 44509.070441879885\\n       * Sell Cashing: 900136941.2165146\\n       * SoA Reputation: 2805.5229142185667\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: ECorp\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 37\\n       * Starting Security Level: 17.02\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 512\\n       * MIN: 128\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 221121.64985285985\\n       * Sell Cashing: 12653552130.555048\\n       * SoA Reputation: 5000\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Fulcrum Technologies\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 15.54\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 1024\\n       * MIN: 256\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 118878.36292278716\\n       * Sell Cashing: 5775221345.852669\\n       * SoA Reputation: 4565.217391304348\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Galactic Cybersystems\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 7.89\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 22228.86971751279\\n       * Sell Cashing: 318793882.1620702\\n       * SoA Reputation: 2317.86133960047\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: NetLink Technologies\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 6\\n       * Starting Security Level: 3.29\\n       -------------------------------------------------\\n       DIFFICULTY: 2.904727531322063\\n       RAM (Bytes)\\n       * MAX: 64\\n       * MIN: 8\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 2825.951960903842\\n       * Sell Cashing: 6785289.000011275\\n       * SoA Reputation: 966.5099882491188\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Aevum Police Headquarters\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 6\\n       * Starting Security Level: 5.35\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 6568.879219785405\\n       * Sell Cashing: 46814681.87469723\\n       * SoA Reputation: 1571.6803760282019\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Rho Construction\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 5\\n       * Starting Security Level: 5.02\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 5021.212242173963\\n       * Sell Cashing: 31910180.59344744\\n       * SoA Reputation: 1474.7356051703878\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Watchdog Security\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 7\\n       * Starting Security Level: 5.85\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 8616.322404498407\\n       * Sell Cashing: 72120128.54315491\\n       * SoA Reputation: 1718.566392479436\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: KuaiGong International\\n       City: Chongqing\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 16.25\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 125425.44102892507\\n       * Sell Cashing: 6603522874.342647\\n       * SoA Reputation: 4773.7955346651\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Solaris Space Systems\\n       City: Chongqing\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 18\\n       * Starting Security Level: 12.59\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 62011.94518938349\\n       * Sell Cashing: 2062413111.0542097\\n       * SoA Reputation: 3698.589894242068\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Nova Medical\\n       City: Ishima\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 5.02\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 12920.205972641304\\n       * Sell Cashing: 82108878.4952497\\n       * SoA Reputation: 1474.7356051703878\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Omega Software\\n       City: Ishima\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 10\\n       * Starting Security Level: 3.2\\n       -------------------------------------------------\\n       DIFFICULTY: 2.814727531322063\\n       RAM (Bytes)\\n       * MAX: 128\\n       * MIN: 4\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 4592.30530635654\\n       * Sell Cashing: 10219978.781996123\\n       * SoA Reputation: 940.0705052878967\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Storm Technologies\\n       City: Ishima\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 5.38\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 512\\n       * MIN: 32\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 33288.96781064266\\n       * Sell Cashing: 239641714.25373995\\n       * SoA Reputation: 1580.4935370152762\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: DefComm\\n       City: New Tokyo\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 17\\n       * Starting Security Level: 7.18\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 29556.21750983957\\n       * Sell Cashing: 357706511.4158932\\n       * SoA Reputation: 2109.283196239718\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Global Pharmaceuticals\\n       City: New Tokyo\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 20\\n       * Starting Security Level: 5.9\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 28305.258825914243\\n       * Sell Cashing: 240577353.80589464\\n       * SoA Reputation: 1733.2549941245595\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Noodle Bar\\n       City: New Tokyo\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,4\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 5\\n       * Starting Security Level: 2.5\\n       -------------------------------------------------\\n       DIFFICULTY: 2.114727531322063\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 1221.8375863594201\\n       * Sell Cashing: 1381091.3747641398\\n       * SoA Reputation: 734.4300822561692\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: VitaLife\\n       City: New Tokyo\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,4\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 5.52\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 34331.16109410128\\n       * Sell Cashing: 258840853.8630859\\n       * SoA Reputation: 1621.6216216216214\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Alpha Enterprises\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 10\\n       * Starting Security Level: 3.62\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 8\\n       * MIN: 2\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 6131.93185525568\\n       * Sell Cashing: 19123769.875106823\\n       * SoA Reputation: 1063.4547591069331\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Blade Industries\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 10.59\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 75030.31168184313\\n       * Sell Cashing: 1827693936.0719447\\n       * SoA Reputation: 3111.045828437133\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Carmichael Security\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 15\\n       * Starting Security Level: 4.66\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 15218.162282914009\\n       * Sell Cashing: 84588408.36295532\\n       * SoA Reputation: 1368.9776733254994\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: DeltaOne\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 5.9\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 15683.658980250713\\n       * Sell Cashing: 133301489.96936093\\n       * SoA Reputation: 1733.2549941245595\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Four Sigma\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 8.18\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 55038.369916666874\\n       * Sell Cashing: 842316875.3512074\\n       * SoA Reputation: 2403.0552291421855\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Icarus Microsystems\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 17\\n       * Starting Security Level: 6.02\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 23922.981827579435\\n       * Sell Cashing: 210835135.23116332\\n       * SoA Reputation: 1768.5076380728553\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Joe's Guns\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 5\\n       * Starting Security Level: 3.13\\n       -------------------------------------------------\\n       DIFFICULTY: 2.744727531322063\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 2074.1513049222895\\n       * Sell Cashing: 4344578.89293959\\n       * SoA Reputation: 919.5064629847238\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: MegaCorp\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 31\\n       * Starting Security Level: 16.36\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 166437.61562094674\\n       * Sell Cashing: 8869832456.85565\\n       * SoA Reputation: 4806.110458284371\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Universal Energy\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 5.9\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 15683.658980250713\\n       * Sell Cashing: 133301489.96936093\\n       * SoA Reputation: 1733.2549941245595\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: CompuTek\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 15\\n       * Starting Security Level: 3.59\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 256\\n       * MIN: 8\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 9480.50941490256\\n       * Sell Cashing: 28901870.325321116\\n       * SoA Reputation: 1054.641598119859\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Helios Labs\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 18\\n       * Starting Security Level: 7.28\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 32136.76326343662\\n       * Sell Cashing: 398742574.4292782\\n       * SoA Reputation: 2138.660399529965\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: LexoCorp\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 15\\n       * Starting Security Level: 4.35\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 14011.551239216926\\n       * Sell Cashing: 68805138.6016209\\n       * SoA Reputation: 1277.9083431257343\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: NWO\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 50\\n       * Starting Security Level: 8.53\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 148444.72723767188\\n       * Sell Cashing: 2449779659.320283\\n       * SoA Reputation: 2505.8754406580492\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: OmniTek Incorporated\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 7.74\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 1024\\n       * MIN: 128\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 51505.1612570307\\n       * Sell Cashing: 713573104.681842\\n       * SoA Reputation: 2273.7955346651\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: Omnia Cybersystems\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 22\\n       * Starting Security Level: 6\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 32408.702911643784\\n       * Sell Cashing: 283914708.7457461\\n       * SoA Reputation: 1762.6321974148063\\n       -------------------------------------------------\\n\\n       ~\\n      ~=================================================\\n       Company: SysCore Securities\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 18\\n       * Starting Security Level: 4.77\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 19349.35680836175\\n       * Sell Cashing: 112164030.72074203\\n       * SoA Reputation: 1401.2925969447706\\n       -------------------------------------------------\\n\\n       ~\\n      \"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"/reports/Infiltration_Report--Mon-Jan-02-2023.txt\",\"text\":\"======================== 1/35 =========================\\n       Company: AeroCorp\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 8.18\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 23212.875441934077\\n       * Sell Cashing: 355253920.8514189\\n       * SoA Reputation: 2403.0552291421855\\n       -------------------------------------------------\\n\\n      ======================== 2/35 =========================\\n       Company: Bachman & Associates\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 15\\n       * Starting Security Level: 8.19\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 29939.172537442784\\n       * Sell Cashing: 459203097.04584056\\n       * SoA Reputation: 2405.99294947121\\n       -------------------------------------------------\\n\\n      ======================== 3/35 =========================\\n       Company: Clarke Incorporated\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 18\\n       * Starting Security Level: 9.55\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 44509.070441879885\\n       * Sell Cashing: 900136941.2165146\\n       * SoA Reputation: 2805.5229142185667\\n       -------------------------------------------------\\n\\n      ======================== 4/35 =========================\\n       Company: ECorp\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 37\\n       * Starting Security Level: 17.02\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 512\\n       * MIN: 128\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 221121.64985285985\\n       * Sell Cashing: 12653552130.555048\\n       * SoA Reputation: 5000\\n       -------------------------------------------------\\n\\n      ======================== 5/35 =========================\\n       Company: Fulcrum Technologies\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 15.54\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 1024\\n       * MIN: 256\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 118878.36292278716\\n       * Sell Cashing: 5775221345.852669\\n       * SoA Reputation: 4565.217391304348\\n       -------------------------------------------------\\n\\n      ======================== 6/35 =========================\\n       Company: Galactic Cybersystems\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 7.89\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 22228.86971751279\\n       * Sell Cashing: 318793882.1620702\\n       * SoA Reputation: 2317.86133960047\\n       -------------------------------------------------\\n\\n      ======================== 7/35 =========================\\n       Company: NetLink Technologies\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 6\\n       * Starting Security Level: 3.29\\n       -------------------------------------------------\\n       DIFFICULTY: 2.9025610493755827\\n       RAM (Bytes)\\n       * MAX: 64\\n       * MIN: 8\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 2825.951960903842\\n       * Sell Cashing: 6785289.000011275\\n       * SoA Reputation: 966.5099882491188\\n       -------------------------------------------------\\n\\n      ======================== 8/35 =========================\\n       Company: Aevum Police Headquarters\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 6\\n       * Starting Security Level: 5.35\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 6568.879219785405\\n       * Sell Cashing: 46814681.87469723\\n       * SoA Reputation: 1571.6803760282019\\n       -------------------------------------------------\\n\\n      ======================== 9/35 =========================\\n       Company: Rho Construction\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 5\\n       * Starting Security Level: 5.02\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 5021.212242173963\\n       * Sell Cashing: 31910180.59344744\\n       * SoA Reputation: 1474.7356051703878\\n       -------------------------------------------------\\n\\n      ======================== 10/35 =========================\\n       Company: Watchdog Security\\n       City: Aevum\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 7\\n       * Starting Security Level: 5.85\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 8616.322404498407\\n       * Sell Cashing: 72120128.54315491\\n       * SoA Reputation: 1718.566392479436\\n       -------------------------------------------------\\n\\n      ======================== 11/35 =========================\\n       Company: KuaiGong International\\n       City: Chongqing\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 16.25\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 125425.44102892507\\n       * Sell Cashing: 6603522874.342647\\n       * SoA Reputation: 4773.7955346651\\n       -------------------------------------------------\\n\\n      ======================== 12/35 =========================\\n       Company: Solaris Space Systems\\n       City: Chongqing\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 18\\n       * Starting Security Level: 12.59\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 62011.94518938349\\n       * Sell Cashing: 2062413111.0542097\\n       * SoA Reputation: 3698.589894242068\\n       -------------------------------------------------\\n\\n      ======================== 13/35 =========================\\n       Company: Nova Medical\\n       City: Ishima\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 5.02\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 12920.205972641304\\n       * Sell Cashing: 82108878.4952497\\n       * SoA Reputation: 1474.7356051703878\\n       -------------------------------------------------\\n\\n      ======================== 14/35 =========================\\n       Company: Omega Software\\n       City: Ishima\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 10\\n       * Starting Security Level: 3.2\\n       -------------------------------------------------\\n       DIFFICULTY: 2.812561049375583\\n       RAM (Bytes)\\n       * MAX: 128\\n       * MIN: 4\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 4592.30530635654\\n       * Sell Cashing: 10219978.781996123\\n       * SoA Reputation: 940.0705052878967\\n       -------------------------------------------------\\n\\n      ======================== 15/35 =========================\\n       Company: Storm Technologies\\n       City: Ishima\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 5.38\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 512\\n       * MIN: 32\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 33288.96781064266\\n       * Sell Cashing: 239641714.25373995\\n       * SoA Reputation: 1580.4935370152762\\n       -------------------------------------------------\\n\\n      ======================== 16/35 =========================\\n       Company: DefComm\\n       City: New Tokyo\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 17\\n       * Starting Security Level: 7.18\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 29556.21750983957\\n       * Sell Cashing: 357706511.4158932\\n       * SoA Reputation: 2109.283196239718\\n       -------------------------------------------------\\n\\n      ======================== 17/35 =========================\\n       Company: Global Pharmaceuticals\\n       City: New Tokyo\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 20\\n       * Starting Security Level: 5.9\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 28305.258825914243\\n       * Sell Cashing: 240577353.80589464\\n       * SoA Reputation: 1733.2549941245595\\n       -------------------------------------------------\\n\\n      ======================== 18/35 =========================\\n       Company: Noodle Bar\\n       City: New Tokyo\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,4\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 5\\n       * Starting Security Level: 2.5\\n       -------------------------------------------------\\n       DIFFICULTY: 2.1125610493755826\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 1221.8375863594201\\n       * Sell Cashing: 1381091.3747641398\\n       * SoA Reputation: 734.4300822561692\\n       -------------------------------------------------\\n\\n      ======================== 19/35 =========================\\n       Company: VitaLife\\n       City: New Tokyo\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,4\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 5.52\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 34331.16109410128\\n       * Sell Cashing: 258840853.8630859\\n       * SoA Reputation: 1621.6216216216214\\n       -------------------------------------------------\\n\\n      ======================== 20/35 =========================\\n       Company: Alpha Enterprises\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 10\\n       * Starting Security Level: 3.62\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 8\\n       * MIN: 2\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 6131.93185525568\\n       * Sell Cashing: 19123769.875106823\\n       * SoA Reputation: 1063.4547591069331\\n       -------------------------------------------------\\n\\n      ======================== 21/35 =========================\\n       Company: Blade Industries\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 10.59\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 75030.31168184313\\n       * Sell Cashing: 1827693936.0719447\\n       * SoA Reputation: 3111.045828437133\\n       -------------------------------------------------\\n\\n      ======================== 22/35 =========================\\n       Company: Carmichael Security\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 15\\n       * Starting Security Level: 4.66\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 15218.162282914009\\n       * Sell Cashing: 84588408.36295532\\n       * SoA Reputation: 1368.9776733254994\\n       -------------------------------------------------\\n\\n      ======================== 23/35 =========================\\n       Company: DeltaOne\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 5.9\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 15683.658980250713\\n       * Sell Cashing: 133301489.96936093\\n       * SoA Reputation: 1733.2549941245595\\n       -------------------------------------------------\\n\\n      ======================== 24/35 =========================\\n       Company: Four Sigma\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 8.18\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 55038.369916666874\\n       * Sell Cashing: 842316875.3512074\\n       * SoA Reputation: 2403.0552291421855\\n       -------------------------------------------------\\n\\n      ======================== 25/35 =========================\\n       Company: Icarus Microsystems\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 17\\n       * Starting Security Level: 6.02\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 23922.981827579435\\n       * Sell Cashing: 210835135.23116332\\n       * SoA Reputation: 1768.5076380728553\\n       -------------------------------------------------\\n\\n      ======================== 26/35 =========================\\n       Company: Joe's Guns\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 5\\n       * Starting Security Level: 3.13\\n       -------------------------------------------------\\n       DIFFICULTY: 2.7425610493755825\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 2074.1513049222895\\n       * Sell Cashing: 4344578.89293959\\n       * SoA Reputation: 919.5064629847238\\n       -------------------------------------------------\\n\\n      ======================== 27/35 =========================\\n       Company: MegaCorp\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 31\\n       * Starting Security Level: 16.36\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 166437.61562094674\\n       * Sell Cashing: 8869832456.85565\\n       * SoA Reputation: 4806.110458284371\\n       -------------------------------------------------\\n\\n      ======================== 28/35 =========================\\n       Company: Universal Energy\\n       City: Sector-12\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 12\\n       * Starting Security Level: 5.9\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 15683.658980250713\\n       * Sell Cashing: 133301489.96936093\\n       * SoA Reputation: 1733.2549941245595\\n       -------------------------------------------------\\n\\n      ======================== 29/35 =========================\\n       Company: CompuTek\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 15\\n       * Starting Security Level: 3.59\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 256\\n       * MIN: 8\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 9480.50941490256\\n       * Sell Cashing: 28901870.325321116\\n       * SoA Reputation: 1054.641598119859\\n       -------------------------------------------------\\n\\n      ======================== 30/35 =========================\\n       Company: Helios Labs\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 18\\n       * Starting Security Level: 7.28\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 32136.76326343662\\n       * Sell Cashing: 398742574.4292782\\n       * SoA Reputation: 2138.660399529965\\n       -------------------------------------------------\\n\\n      ======================== 31/35 =========================\\n       Company: LexoCorp\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 15\\n       * Starting Security Level: 4.35\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 14011.551239216926\\n       * Sell Cashing: 68805138.6016209\\n       * SoA Reputation: 1277.9083431257343\\n       -------------------------------------------------\\n\\n      ======================== 32/35 =========================\\n       Company: NWO\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 50\\n       * Starting Security Level: 8.53\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 148444.72723767188\\n       * Sell Cashing: 2449779659.320283\\n       * SoA Reputation: 2505.8754406580492\\n       -------------------------------------------------\\n\\n      ======================== 33/35 =========================\\n       Company: OmniTek Incorporated\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0,6\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 25\\n       * Starting Security Level: 7.74\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 1024\\n       * MIN: 128\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 51505.1612570307\\n       * Sell Cashing: 713573104.681842\\n       * SoA Reputation: 2273.7955346651\\n       -------------------------------------------------\\n\\n      ======================== 34/35 =========================\\n       Company: Omnia Cybersystems\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 22\\n       * Starting Security Level: 6\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 32408.702911643784\\n       * Sell Cashing: 283914708.7457461\\n       * SoA Reputation: 1762.6321974148063\\n       -------------------------------------------------\\n\\n      ======================== 35/35 =========================\\n       Company: SysCore Securities\\n       City: Volhaven\\n       -------------------------------------------------\\n       Cost-Multipler: 0\\n       Expense-Multipler: 0\\n       -------------------------------------------------\\n       TYPES: 0\\n       -------------------------------------------------\\n       REQUIREMENTS\\n       * Clearance Level: 18\\n       * Starting Security Level: 4.77\\n       -------------------------------------------------\\n       DIFFICULTY: 3\\n       RAM (Bytes)\\n       * MAX: 0\\n       * MIN: 0\\n       -------------------------------------------------\\n       Reward\\n       * Trade Reputation: 19349.35680836175\\n       * Sell Cashing: 112164030.72074203\\n       * SoA Reputation: 1401.2925969447706\\n       -------------------------------------------------\\n\\n      \"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64131.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"EMAIL CLOUD TABLE MOUSE VIRUS\",12],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"95.8.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30564218420,\"moneyMax\":764105460500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1352,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"74.0.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43307560662,\"moneyMax\":1082689016550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1142,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"21.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":18756030550,\"moneyMax\":468900763750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":978,\"serverGrowth\":69}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"65.8.4.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":30367030263,\"moneyMax\":759175756575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":986,\"serverGrowth\":57}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"5.0.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":27387035484,\"moneyMax\":684675887100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1126,\"serverGrowth\":77}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-689569.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"4188255154\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"22.4.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":19444336123,\"moneyMax\":486108403075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1215,\"serverGrowth\":69}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"49.7.4.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":20703518672,\"moneyMax\":517587966800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":934,\"serverGrowth\":95}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"83.9.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":16256635808,\"moneyMax\":406415895200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1250,\"serverGrowth\":91}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"45.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":23874842929,\"moneyMax\":596871073225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1068,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"98.6.9.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1767185958,\"moneyMax\":44179648950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1034,\"serverGrowth\":83}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"70.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1467,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"36.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1027991047,\"moneyMax\":25699776175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1043,\"serverGrowth\":79}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"6.4.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":945945926,\"moneyMax\":23648648150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":946,\"serverGrowth\":54}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"6.3.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":839653900,\"moneyMax\":20991347500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":74}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-854867-FoodNStuff.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1],[0,1,0,0,0,0,0],[0,0,1,0,0,0,1],[0,1,0,1,0,0,0],[1,0,0,0,0,0,0],[0,1,1,0,0,0,1],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"33.8.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"omnitek\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":628865714,\"moneyMax\":15721642850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":846,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"3.1.5.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":789161206,\"moneyMax\":19729030150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":67}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"12.9.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":984942232,\"moneyMax\":24623555800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":94}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"14.0.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1151527722,\"moneyMax\":28788193050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":81}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"92.6.9.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":774689835,\"moneyMax\":19367245875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":842,\"serverGrowth\":70}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"44.7.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":538963727,\"moneyMax\":13474093175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":870,\"serverGrowth\":89}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316481-CyberSec.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,1,0],[0,0,0,1,0,0,0],[0,1,0,1,1,1,0],[0,0,0,1,1,1,1],[0,0,0,0,0,0,0],[1,1,0,0,0,0,0],[0,1,0,1,0,0,0],[0,0,0,0,0,0,0]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"63.8.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":871043807,\"moneyMax\":21776095175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":906,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"86.1.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":781700799,\"moneyMax\":19542519975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-3043-FoodNStuff.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[10,38,150,57,190,86,108,187,65,186,121,72,112,12,116,196,176,21,129,13,129,75,36,62,13,40,51,199,15,141,65,96,140,20,177,109,22,108,195,78,15,144,198,123,98,120,35]],\"reward\":{\"name\":\"FoodNStuff\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"85.9.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1100274689,\"moneyMax\":27506867225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":923,\"serverGrowth\":57}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"83.3.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":915429996,\"moneyMax\":22885749900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":64}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"1.8.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":1064453729,\"moneyMax\":26611343225,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":66}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"14.9.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":922583934,\"moneyMax\":23064598350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":848,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-746241.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[3,[102,55,22,168,176,152,96,106,147,132,7,106,117,7,30,161,163,122,39,57,102,62]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-305656-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[25,28],[14,20],[7,13],[20,25]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"76.7.0.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":800172224,\"moneyMax\":20004305600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":822,\"serverGrowth\":76}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"53.5.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1398532242,\"moneyMax\":34963306050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":833,\"serverGrowth\":57}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-284260.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[185,[4,5,7,9,10,11,13,14,15,16,17]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"35.7.4.8\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1648275608,\"moneyMax\":41206890200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":750,\"serverGrowth\":80}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"93.0.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1240265437,\"moneyMax\":31006635925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":71}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"38.9.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1367375754,\"moneyMax\":34184393850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":811,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"99.1.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":1005169141,\"moneyMax\":25129228525,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":788,\"serverGrowth\":79}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"0.8.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":769355384,\"moneyMax\":19233884600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":673,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-404662.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"MODEMPRINTTRASHMOUSECLOUD\",\"EXABYTE\"],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"64.5.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":561391203,\"moneyMax\":14034780075,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":512,\"serverGrowth\":52}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"59.2.5.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":614339977,\"moneyMax\":15358499425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":557,\"serverGrowth\":52}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"51.5.7.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":290436977,\"moneyMax\":7260924425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":427,\"serverGrowth\":32}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"42.4.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":217988378,\"moneyMax\":5449709450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":394,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"24.0.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":852394371,\"moneyMax\":21309859275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":752,\"serverGrowth\":76}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"1.3.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":230744391,\"moneyMax\":5768609775,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":449,\"serverGrowth\":46}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"15.7.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":469404495,\"moneyMax\":11735112375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":640,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-133816-CyberSec.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[14,17],[7,11],[20,22],[13,20],[1,7],[21,29],[3,4],[6,10],[1,11],[4,12],[21,30],[18,19],[6,11]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"70.2.0.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":345747496,\"moneyMax\":8643687400,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":419,\"serverGrowth\":44}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"80.8.9.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":197865626,\"moneyMax\":4946640650,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":291,\"serverGrowth\":48}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"28.6.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":226495842,\"moneyMax\":5662396050,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":347,\"serverGrowth\":47}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"22.3.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":403,\"serverGrowth\":68}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-638737.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[27,41,15,26],[39,39,22,43],[50,30,24,28],[19,43,26,2],[18,5,30,23],[38,48,9,10],[3,25,8,22],[25,25,33,49],[43,27,40,50],[18,49,23,20],[25,1,31,42],[42,43,6,9]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"94.1.4.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":82815945,\"moneyMax\":2070398625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":277,\"serverGrowth\":40}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-887706.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[160,58,85,155,79],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"60.7.4.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":6.000000000000119,\"minDifficulty\":1,\"moneyAvailable\":1312603,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"92.8.3.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n\\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n\\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"/scripts/example-template-script.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/example-template-script.js\",\"url\":\"blob:file:///cf19b9f6-e718-4f44-8bb4-8e5cf1dd3dc0\",\"moduleSequenceNumber\":712}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":712,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Custom color coding.\\r\\n    const cyan = \\\"\\\\u001b[36m\\\";\\r\\n    const green = \\\"\\\\u001b[32m\\\";\\r\\n    const red = \\\"\\\\u001b[31m\\\";\\r\\n    const reset = \\\"\\\\u001b[0m\\\";\\r\\n\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n    \\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n    \\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    \\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    \\r\\n    ns.print(`Current security threshold: ${securityThresh}\\\\nCurrent cash threshold: ${moneyThresh}`)\\r\\n\\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    \\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n    \\r\\n    \\r\\n    var hackCount = 0\\r\\n    var hackLimit = 10 // Set hack limit to then sleep and restart to gain more XP\\r\\n    \\r\\n    var sleepTime = 5000 // ms 5s\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            ns.print('INFO ℹ running weaken...⏳')\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            ns.print('INFO ℹ running grow...⏳')\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            if (hackCount !== hackLimit) {\\r\\n                ns.print(`SUCCESS Hacking target: \\\\u001b[36m${target} - current iteration ${hackCount}/${hackLimit}\\\\u001b[0m`)\\r\\n                await ns.hack(target);\\r\\n                hackCount += 1\\r\\n           } else {\\r\\n            ns.print(`INFO Sleeping target: ${target} - current iteration ${hackCount}/${hackLimit}\\\\n letting build up of next batch`)\\r\\n                hackCount = 0\\r\\n               await ns.sleep(sleepTime)\\r\\n           }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    }\",\"filename\":\"/programs/hack-farmer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/programs/hack-farmer.js\",\"url\":\"blob:file:///ea149b61-2a27-42d0-b9c4-e1ccf0bf9beb\",\"moduleSequenceNumber\":2361}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":2361,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.703999999999906,\"minDifficulty\":3,\"moneyAvailable\":2597233.960209595,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"63.0.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":13,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,1915,150]},\"filename\":\"/programs/hack-farmer.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13686.30878618086,\"onlineMoneyMade\":0,\"onlineRunningTime\":50855.40999993397,\"pid\":37,\"ramUsage\":2.6,\"server\":\"sigma-cosmetics\",\"threads\":5,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n\\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n\\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n\\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while (true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            await ns.hack(target);\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"/scripts/example-template-script.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/example-template-script.js\",\"url\":\"blob:file:///b3e585bf-646b-42db-9555-a782b03f23de\",\"moduleSequenceNumber\":723}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":723,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Custom color coding.\\r\\n    const cyan = \\\"\\\\u001b[36m\\\";\\r\\n    const green = \\\"\\\\u001b[32m\\\";\\r\\n    const red = \\\"\\\\u001b[31m\\\";\\r\\n    const reset = \\\"\\\\u001b[0m\\\";\\r\\n\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n    \\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n    \\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    \\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    \\r\\n    ns.print(`Current security threshold: ${securityThresh}\\\\nCurrent cash threshold: ${moneyThresh}`)\\r\\n\\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    \\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n    \\r\\n    \\r\\n    var hackCount = 0\\r\\n    var hackLimit = 10 // Set hack limit to then sleep and restart to gain more XP\\r\\n    \\r\\n    var sleepTime = 5000 // ms 5s\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            ns.print('INFO ℹ running weaken...⏳')\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            ns.print('INFO ℹ running grow...⏳')\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            if (hackCount !== hackLimit) {\\r\\n                ns.print(`SUCCESS Hacking target: \\\\u001b[36m${target} - current iteration ${hackCount}/${hackLimit}\\\\u001b[0m`)\\r\\n                await ns.hack(target);\\r\\n                hackCount += 1\\r\\n           } else {\\r\\n            ns.print(`INFO Sleeping target: ${target} - current iteration ${hackCount}/${hackLimit}\\\\n letting build up of next batch`)\\r\\n                hackCount = 0\\r\\n               await ns.sleep(sleepTime)\\r\\n           }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    }\",\"filename\":\"/programs/hack-farmer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/programs/hack-farmer.js\",\"url\":\"blob:file:///59547228-edac-4db8-875f-9cd447ba4438\",\"moduleSequenceNumber\":2457}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":2457,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":7.979999999999759,\"minDifficulty\":3,\"moneyAvailable\":6834740.320236292,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-843539.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[12,[[4,9],[4,6],[2,7],[4,11],[1,6],[3,8],[7,8],[2,9],[5,10],[4,7],[4,5],[9,10],[1,9],[0,5],[2,11],[1,7]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"57.8.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"66.8.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,708,264]},\"filename\":\"/programs/hack-farmer.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11273.806898447168,\"onlineMoneyMade\":0,\"onlineRunningTime\":52454.40999993978,\"pid\":34,\"ramUsage\":2.6,\"server\":\"zer0\",\"threads\":12,\"dependencies\":[{\"filename\":\"/programs/hack-farmer.js\",\"url\":\"blob:file:///b8fe71e7-427e-444a-a702-b19e078cbb83\",\"moduleSequenceNumber\":2197}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Custom color coding.\\r\\n    const cyan = \\\"\\\\u001b[36m\\\";\\r\\n    const green = \\\"\\\\u001b[32m\\\";\\r\\n    const red = \\\"\\\\u001b[31m\\\";\\r\\n    const reset = \\\"\\\\u001b[0m\\\";\\r\\n\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n    \\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n    \\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    \\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    \\r\\n    ns.print(`Current security threshold: ${securityThresh}\\\\nCurrent cash threshold: ${moneyThresh}`)\\r\\n\\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    \\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n    \\r\\n    \\r\\n    var hackCount = 0\\r\\n    var hackLimit = 10 // Set hack limit to then sleep and restart to gain more XP\\r\\n    \\r\\n    var sleepTime = 5000 // ms 5s\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            ns.print('INFO ℹ running weaken...⏳')\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            ns.print('INFO ℹ running grow...⏳')\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            if (hackCount !== hackLimit) {\\r\\n                ns.print(`SUCCESS Hacking target: \\\\u001b[36m${target} - current iteration ${hackCount}/${hackLimit}\\\\u001b[0m`)\\r\\n                await ns.hack(target);\\r\\n                hackCount += 1\\r\\n           } else {\\r\\n            ns.print(`INFO Sleeping target: ${target} - current iteration ${hackCount}/${hackLimit}\\\\n letting build up of next batch`)\\r\\n                hackCount = 0\\r\\n               await ns.sleep(sleepTime)\\r\\n           }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    }\",\"filename\":\"/programs/hack-farmer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/programs/hack-farmer.js\",\"url\":\"blob:file:///b8fe71e7-427e-444a-a702-b19e078cbb83\",\"moduleSequenceNumber\":2197}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":2197,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":12.631999999999998,\"minDifficulty\":8,\"moneyAvailable\":15686339.657647703,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"90.7.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"19.1.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"15.1.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"28.8.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"89.7.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"96.1.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"57.9.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"76.6.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":27,\"minDifficulty\":9,\"moneyAvailable\":69841470,\"moneyMax\":1746036750,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":219,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"44.3.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":44,\"minDifficulty\":15,\"moneyAvailable\":40812919,\"moneyMax\":1020322975,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":266,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"80.2.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"40.8.2.9\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":497,\"serverGrowth\":43}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"51.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1071,\"serverGrowth\":55}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"21.6.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":707,\"serverGrowth\":47}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"48.0.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":516,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-62071-CyberSec.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[63,28,109,118,168,36,20,44,20,170,38,139,25,68,179,151,134,93,181,173,108,95,145,41,172,167],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"30.3.0.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":357,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"36.6.4.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":205,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"2.7.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":541,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"56.1.7.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n    // Custom color coding.\\r\\n    const cyan = \\\"\\\\u001b[36m\\\";\\r\\n    const green = \\\"\\\\u001b[32m\\\";\\r\\n    const red = \\\"\\\\u001b[31m\\\";\\r\\n    const reset = \\\"\\\\u001b[0m\\\";\\r\\n\\r\\n\\r\\n    const serverOverride = ns.args[0]\\r\\n    \\r\\n    if (serverOverride) {\\r\\n        ns.print('Overriding server: ' + serverOverride)\\r\\n    } else {\\r\\n        ns.print(`No server override detected defaulting to n00dles`)\\r\\n    }\\r\\n\\r\\n    // Defines the \\\"target server\\\", which is the server\\r\\n    // that we're going to hack. In this case, it's \\\"n00dles\\\"\\r\\n    var target = serverOverride || \\\"n00dles\\\";\\r\\n    \\r\\n    // Defines how much money a server should have before we hack it\\r\\n    // In this case, it is set to 75% of the server's max money\\r\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\r\\n    \\r\\n    // Defines the maximum security level the target server can\\r\\n    // have. If the target's security level is higher than this,\\r\\n    // we'll weaken it before doing anything else\\r\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\r\\n    \\r\\n    ns.print(`Current security threshold: ${securityThresh}\\\\nCurrent cash threshold: ${moneyThresh}`)\\r\\n\\r\\n    // If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n    // on the target server\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        ns.brutessh(target);\\r\\n    }\\r\\n    \\r\\n    // Get root access to target server\\r\\n    ns.nuke(target);\\r\\n    \\r\\n    \\r\\n    var hackCount = 0\\r\\n    var hackLimit = 10 // Set hack limit to then sleep and restart to gain more XP\\r\\n    \\r\\n    var sleepTime = 5000 // ms 5s\\r\\n\\r\\n    // Infinite loop that continously hacks/grows/weakens the target server\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\r\\n            // If the server's security level is above our threshold, weaken it\\r\\n            ns.print('INFO ℹ running weaken...⏳')\\r\\n            await ns.weaken(target);\\r\\n\\r\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\r\\n            // If the server's money is less than our threshold, grow it\\r\\n            ns.print('INFO ℹ running grow...⏳')\\r\\n            await ns.grow(target);\\r\\n\\r\\n        } else {\\r\\n            // Otherwise, hack it\\r\\n            if (hackCount !== hackLimit) {\\r\\n                ns.print(`SUCCESS Hacking target: \\\\u001b[36m${target} - current iteration ${hackCount}/${hackLimit}\\\\u001b[0m`)\\r\\n                await ns.hack(target);\\r\\n                hackCount += 1\\r\\n           } else {\\r\\n            ns.print(`INFO Sleeping target: ${target} - current iteration ${hackCount}/${hackLimit}\\\\n letting build up of next batch`)\\r\\n                hackCount = 0\\r\\n               await ns.sleep(sleepTime)\\r\\n           }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    }\",\"filename\":\"/programs/hack-farmer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/programs/hack-farmer.js\",\"url\":\"blob:file:///8fbb9269-832b-49bf-a12e-64ab6c612f31\",\"moduleSequenceNumber\":1900}],\"dependents\":[],\"ramUsage\":2.6,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":2146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.012,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":56,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"43.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"70.2.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"35.2.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"squeezy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"squeezy\",\"httpPortOpen\":false,\"ip\":\"29.2.8.3\",\"isConnectedTo\":false,\"maxRam\":2,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"README.txt\",\"text\":\"This server is for test grounds and farms of scripts\"}}],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moose\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"moose\",\"httpPortOpen\":false,\"ip\":\"36.8.4.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":4843.62500507327,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":130.8824362402192,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":15.095528681337571,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":32645.58919785356}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{\"squeezy\":\"connect squeezy\",\"nuke\":\"run NUKE.exe\",\"hack-farm\":\"run programs/hack-farmer.js\",\"s-a\":\"scan-analyze\",\"openSSH\":\"run BruteSSH.exe\",\"foodnstuff\":\"connect foodnstuff\",\"CSEC\":\"connect CSEC\",\"f-crack\":\"run FTPCrack.exe\"}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":10,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":false},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"dracula\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\"}","VersionSave":"26","AllGangsSave":"","LastExportBonus":"1672645186411","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}